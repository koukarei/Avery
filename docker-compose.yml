services:
  gradio:
    env_file:
      - gradio-project/.env
    container_name: gradio
    build:
      context: gradio-project
      dockerfile: Dockerfile
    # command: gradio gradio_app.py
    ports:
      - "7870:7870"
    tty: true
    volumes:
      - ./gradio-project:/app
    command: uvicorn gradio_app:app --host 0.0.0.0 --port 7870
    networks:
      - avery-network
    depends_on:
      backend-project:
        condition: service_healthy


  react_front:
    container_name: react_front
    build:
      context: react-project
      dockerfile: Dockerfile
    volumes:
      - ./react-project/app:/app
      - ./react-project/app/node_modules:/app/node_modules
    ports:
      - "7873:3000"
    command: npm start
    tty: true
    networks:
      - avery-network
      
  db:
    build:
      context: db-project
      dockerfile: Dockerfile
    container_name: mysql
    command: mysqld
    restart: always
    env_file:
      - db-project/.env
    ports:
        - 7872:3306
    volumes:
        - db-store:/var/lib/mysql
        - ./db-project/conf.d:/etc/mysql/conf.d
        # ★ ローカルのscriptディレクトリにマウントします
        - ./db-project/init:/docker-entrypoint-initdb.d 
    tty: true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - avery-network
      
  backend-project:
    env_file:
      - backend-project/.env
    container_name: backend
    build:
      context: backend-project
      dockerfile: server.dockerfile
    volumes:
      - stanza_resources:/root/stanza_resources
      - gpt2-cache:/root/.cache/huggingface
      - ./backend-project/backend:/backend
    #command: "fastapi dev --host 0.0.0.0 --port 8000 /backend/main.py"
    # command:
    #   - gunicorn
    #   - main:app
    #   - --workers 4
    #   - --bind 0.0.0.0:8000
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4
    ports:
      - "7871:8000"
    tty: true
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8000/sqlapp/", "-X", "GET"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 90s
    depends_on:
      - db
      - worker
      - dashboard
      - blip2-project
    environment:
      APP_MODULE: backend.main:app
      PORT: 7871
    networks:
      - avery-network

  worker:
    build: 
      context: backend-project
      dockerfile: worker.dockerfile
    container_name: worker
    depends_on:
      - redis
    volumes:
      - stanza_resources:/root/stanza_resources
      - gpt2-cache:/root/.cache/huggingface
      - ./backend-project/backend:/backend
    command:
      - celery
      - --app=sql_app.tasks.app
      - worker
      - --loglevel=info
      - --pool=gevent
      - --concurrency=500
    env_file:
      - backend-project/.env
    environment:
      APP_MODULE: backend.main:app
      PORT: 7871
    networks:
      - avery-network

  dashboard:
    image: mher/flower:0.9.7
    container_name: dashboard
    command: ['flower', '--broker=redis://redis:7876', '--port=7877']
    ports:
      - "7877:7877"
    depends_on:
      - redis
    env_file:
      - backend-project/.env
    environment:
      APP_MODULE: backend.main:app
      PORT: 7871
    networks:
      - avery-network

  redis:
    image: redis:latest
    container_name: redis
    command:
    - redis-server 
    - --port 7876
    - --maxmemory 32gb
    - --maxmemory-policy allkeys-lfu
    ports:
      - 7876:7876
    environment:
      APP_MODULE: backend.main:app
      PORT: 7871
    networks:
      - avery-network

  blip2-project:
    container_name: blip2
    build:
      context: blip2-project
      dockerfile: Dockerfile
    volumes:
      - blip2-cache:/root/.cache/huggingface
      - ./blip2-project:/blip2
    command: uvicorn blip2.app.main:app --host 0.0.0.0 --port 7874 --workers 4
    ports: 
      - "7874:7874"
    tty: true
    networks:
      - avery-network

volumes:
  db-store:
  node_modules:
  stanza_resources:
  gpt2-cache:
  blip2-cache:

networks:
  avery-network:
    driver: bridge