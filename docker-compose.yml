services:
  gradio:
    env_file:
      - gradio-project/.env
    container_name: gradio
    build:
      context: gradio-project
      dockerfile: Dockerfile
    # command: gradio gradio_app.py
    ports:
      - "7870:7870"
    tty: true
    volumes:
      - ./gradio-project:/app
    command: uvicorn gradio_app:app --host 0.0.0.0 --port 7870
    restart: unless-stopped
    networks:
      - avery-network
    depends_on:
      backend-project:
        condition: service_healthy

  db2:
    build:
      context: db-project
      dockerfile: Dockerfile
    container_name: mysql2
    command: mysqld
    restart: always
    env_file:
      - db-project/.env
    ports:
        - 7875:3306
    volumes:
        - db-store2:/var/lib/mysql
        - ./db-project/conf.d:/etc/mysql/conf.d
        # ★ ローカルのscriptディレクトリにマウントします
        - ./db-project/init:/docker-entrypoint-initdb.d 
    tty: true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - avery-network

  backend-project:
    env_file:
      - backend-project/.env
    container_name: backend
    build:
      context: backend-project
      dockerfile: server.dockerfile
    volumes:
      - ./backend-project/backend:/backend
    #command: "fastapi dev --host 0.0.0.0 --port 8000 /backend/main.py"
    # command:
    #   - gunicorn
    #   - main:app
    #   - --workers 4
    #   - --bind 0.0.0.0:8000
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    restart: unless-stopped
    ports:
      - "7871:8000"
    tty: true
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8000/avery/sqlapp2/", "-X", "GET"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 90s
    depends_on:
      - db2
      - worker
      - dashboard
    environment:
      APP_MODULE: backend.main:app
      PORT: 7871
    networks:
      - avery-network
    deploy:
      resources:
        reservations:
          cpus: '0.5'

  worker:
    build: 
      context: backend-project
      dockerfile: worker.dockerfile
    container_name: worker
    depends_on:
      - redis
    volumes:
      - ./backend-project/backend:/backend
    command:
      - celery
      - --app=tasks.app
      - worker
      - --loglevel=info
      - --pool=gevent
      - --concurrency=500
    restart: unless-stopped
    env_file:
      - backend-project/.env
    environment:
      APP_MODULE: backend.main:app
      PORT: 7871
    networks:
      - avery-network
    deploy:
      resources:
        reservations:
          cpus: '0.5'

  dashboard:
    image: mher/flower:0.9.7
    container_name: dashboard
    command: ['flower', '--broker=redis://redis:7876', '--port=7877']
    restart: unless-stopped
    ports:
      - "7877:7877"
    depends_on:
      - redis
    env_file:
      - backend-project/.env
    environment:
      APP_MODULE: backend.main:app
      PORT: 7871
    networks:
      - avery-network

  redis:
    image: redis:latest
    container_name: redis
    command:
    - redis-server 
    - --port 7876
    - --maxmemory 32gb
    - --maxmemory-policy allkeys-lfu
    restart: unless-stopped
    ports:
      - 7876:7876
    environment:
      APP_MODULE: backend.main:app
      PORT: 7871
    networks:
      - avery-network

  nginx:
    env_file:
      - react-project/avery_analytics_vite/.env
    depends_on: 
        - backend-project
    container_name: proxy-app
    build: 
        context: react-project
        dockerfile: Dockerfile
    ports: 
        - "7873:80"
    restart: always
    networks:
      - avery-network

volumes:
  db-store:
  db-store2:
  node_modules:

networks:
  avery-network:
    driver: bridge