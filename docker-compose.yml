services:
  gradio:
    env_file:
      - gradio-project/.env
    container_name: gradio
    build:
      context: gradio-project
      dockerfile: Dockerfile
    # command: gradio gradio_app.py
    ports:
      - "7870:7870"
    tty: true
    volumes:
      - ./gradio-project:/app
    command: uvicorn gradio_test:app --host 0.0.0.0 --port 7870
    networks:
      - avery-network
    depends_on:
      backend-project:
        condition: service_healthy


  react_front:
    container_name: react_front
    build:
      context: react-project
      dockerfile: Dockerfile
    volumes:
      - ./react-project/app:/app
      - ./react-project/app/node_modules:/app/node_modules
    ports:
      - "7873:3000"
    command: npm start
    tty: true
    networks:
      - avery-network
      
  db:
    build:
      context: db-project
      dockerfile: Dockerfile
    container_name: mysql
    command: mysqld
    restart: always
    env_file:
      - db-project/.env
    ports:
        - 7872:3306
    volumes:
        - db-store:/var/lib/mysql
        - ./db-project/conf.d:/etc/mysql/conf.d
        # ★ ローカルのscriptディレクトリにマウントします
        - ./db-project/init:/docker-entrypoint-initdb.d 
    tty: true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - avery-network
      
  backend-project:
    env_file:
      - backend-project/.env
    container_name: backend
    build:
      context: backend-project
      dockerfile: Dockerfile
    volumes:
      - ./backend-project/backend:/backend
      - ./backend-project/media:/static
    command: "fastapi dev --host 0.0.0.0 --port 8000 /backend/main.py"
    # command: >
    #   sh -c "
    #     echo 'Waiting for database to be ready...'
    #     while ! nc -z db 3306; do
    #       sleep 1
    #     done
    #     echo 'Database is ready!'
    #     ls
    #     fastapi dev --host 0.0.0.0 --port 8000 /backend/main.py
    #   " 
    ports:
      - "7871:8000"
    tty: true
    healthcheck:
      test: ["CMD", "curl", "http://localhost:8000/sqlapp/", "-X", "GET"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 90s
    networks:
      - avery-network
    depends_on:
      db:
        condition: service_healthy

  blip2-project:
    container_name: blip2
    build:
      context: blip2-project
      dockerfile: Dockerfile
    volumes:
      - ./blip2-project:/blip2
    command: uvicorn blip2.app.main:app --host 0.0.0.0 --port 7874
    ports: 
      - "7874:7874"
    tty: true
    networks:
      - avery-network

volumes:
  db-store:
  media:
  node_modules:

networks:
  avery-network:
    driver: bridge